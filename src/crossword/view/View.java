package crossword.view;

import crossword.controller.MenuController;
import crossword.loader.CrossWordsLoader;
import crossword.model.Model;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.util.Observable;
import java.util.Observer;

public class View extends JFrame implements Observer
{

	private MenuController menuController;
	private Model model;
	private javax.swing.JPanel grid;
	private javax.swing.JPanel hints;
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JMenuItem aboutMenuItem;
	private javax.swing.JMenuItem assistedMenuItem;
	private javax.swing.JMenuItem checkMenuItem;
	private javax.swing.JMenu crosswordMenu;
	private javax.swing.JMenuItem exitMenuItem;
	private JFileChooser fileChooser;
	private javax.swing.JMenu fileMenu;
	private javax.swing.JMenu helpMenu;
	private javax.swing.JMenuItem helpMenuItem;
	private javax.swing.JMenuItem loadMenuItem;
	private javax.swing.JMenuBar menuBar;
	private javax.swing.JMenu modeMenu;
	private javax.swing.JMenuItem normalMenuItem;
	private javax.swing.JMenuItem viewSolutionMenuItem;
	// End of variables declaration//GEN-END:variables

	/**
	 * Creates new form View
	 */
	public View()
	{
		initComponents();
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[])
	{
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
	     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try
		{
			for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels())
			{
				if ("Nimbus".equals(info.getName()))
				{
					UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		}
		catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			@Override
			public void run()
			{
				new View().setVisible(true);
			}
		});
	}

	public void load()
	{
		if (model != null)
		{
			JOptionPane.showMessageDialog(this,
					"XML file already loaded.",
					"Error",
					JOptionPane.ERROR_MESSAGE);
			return;
		}
		int returnVal = fileChooser.showOpenDialog(this);
		if (returnVal == JFileChooser.APPROVE_OPTION)
		{
			String path = fileChooser.getSelectedFile().getAbsolutePath();
			CrossWordsLoader loader = new CrossWordsLoader(path);
			if (!loader.validateCrosswords())
			{
				JOptionPane.showMessageDialog(this,
						"The XML file does not meet requirements.",
						"Error",
						JOptionPane.ERROR_MESSAGE);
				return;
			}
			model = new Model(loader.getList().get(0));
			initGame();
		}
		else
		{
			System.out.println("Canceled");
		}
	}

	private void initGame()
	{
		grid = new GridPanel(model);
		add(grid);
		hints = new HintsPanel(model);
		add(hints);
		pack();
	}

	public void setMode(boolean mode)
	{
		model.setAssisted(mode);
	}

	public void check()
	{
		model.check();
	}

	public void solve()
	{
		model.solve();
	}

	@Override
	public void update(Observable o, Object arg)
	{
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        fileChooser = new JFileChooser();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        modeMenu = new javax.swing.JMenu();
        normalMenuItem = new javax.swing.JMenuItem();
        assistedMenuItem = new javax.swing.JMenuItem();
        crosswordMenu = new javax.swing.JMenu();
        checkMenuItem = new javax.swing.JMenuItem();
        viewSolutionMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Select XML");
        fileChooser.setFileFilter(new FileNameExtensionFilter("XML Files", "xml"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.FlowLayout());

        menuController = new MenuController(this);

        fileMenu.setText("File");

        loadMenuItem.setText("Load");
        loadMenuItem.addActionListener(menuController);
        fileMenu.add(loadMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(menuController);
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        modeMenu.setText("Mode");

        normalMenuItem.setText("Normal");
        normalMenuItem.addActionListener(menuController);
        modeMenu.add(normalMenuItem);

        assistedMenuItem.setText("Assisted");
        assistedMenuItem.addActionListener(menuController);
        modeMenu.add(assistedMenuItem);

        menuBar.add(modeMenu);

        crosswordMenu.setText("Crossword");

        checkMenuItem.setText("Check");
        checkMenuItem.addActionListener(menuController);
        crosswordMenu.add(checkMenuItem);

        viewSolutionMenuItem.setText("View Solution");
        viewSolutionMenuItem.addActionListener(menuController);
        crosswordMenu.add(viewSolutionMenuItem);

        menuBar.add(crosswordMenu);

        helpMenu.setText("Help");

        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(menuController);
        helpMenu.add(helpMenuItem);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(menuController);
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

}
